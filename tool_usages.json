[
  {
    "file": "nwn_asm.nim",
    "description": "Disassemble ncs.\r\n\r\nThis utility is basically a stub to exercise the nwscript disasm lib.\r\nNo API stability guarantees.",
    "usage": "nwn_asm [options] -d <script>",
    "options": "-d                          Disassemble ncs file to stdout.\r\n  -g                          Require .ndb loading.\r\n  -G                          Do not attempt to load .ndb.\r\n  -S                          Do not attempt to read/load source code for interweaving (ndb only).\r\n  -F                          Omit per-function IP offsets (ndb only).\r\n  --internal-names            Do not print shorthand opcodes, use internal constants instead.\r\n  -L                          Do not look up language spec\r\n  --langspec NSS              Language spec to load [default: nwscript]\r\n  -n LEN                      Max string length printed [default: 15]\r\n  --no-color                  Do not emit colors to terminal.\r\n  --term-width N              Override terminal width for cell wrapping (0: Don't wrap)\r\n  --cell-padding N            Cell padding between output columns [default: 2]",
    "doc": "\r\nDisassemble ncs.\r\n\r\nThis utility is basically a stub to exercise the nwscript disasm lib.\r\nNo API stability guarantees.\r\n\r\nUsage:\r\n  $0 [options] -d <script>\r\n  $USAGE\r\n\r\nOptions:\r\n  -d                          Disassemble ncs file to stdout.\r\n  -g                          Require .ndb loading.\r\n  -G                          Do not attempt to load .ndb.\r\n  -S                          Do not attempt to read/load source code for interweaving (ndb only).\r\n\r\n  -F                          Omit per-function IP offsets (ndb only).\r\n\r\n  --internal-names            Do not print shorthand opcodes, use internal constants instead.\r\n\r\n  -L                          Do not look up language spec\r\n  --langspec NSS              Language spec to load [default: nwscript]\r\n\r\n  -n LEN                      Max string length printed [default: 15]\r\n\r\n  --no-color                  Do not emit colors to terminal.\r\n  --term-width N              Override terminal width for cell wrapping (0: Don't wrap)\r\n  --cell-padding N            Cell padding between output columns [default: 2]\r\n$OPTRESMAN\r\n"
  },
  {
    "file": "nwn_compressedbuf.nim",
    "description": "De/compress a blob in the same way the game handles NWCompressedBuf data.\r\n\r\n<magic> is a 4 byte string (e.g. \"SQL3\").\r\n\r\nInput and output default to stdin/stdout respectively.",
    "usage": "nwn_compressedbuf [options] -c <magic> [-a <alg>]",
    "options": "-c                          Compress IN, expect <magic> or error\r\n  -a --alg ALG                Algorithm to use for compression (one of ) [default: zstd]\r\n  -d                          Decompress IN, expect <magic> or error\r\n  -i IN                       Input file [default: -]\r\n  -o OUT                      Output file [default: -]",
    "doc": "\r\nDe/compress a blob in the same way the game handles NWCompressedBuf data.\r\n\r\n<magic> is a 4 byte string (e.g. \"SQL3\").\r\n\r\nInput and output default to stdin/stdout respectively.\r\n\r\nUsage:\r\n  $0 [options] -c <magic> [-a <alg>]\r\n  $0 [options] -d <magic>\r\n  $USAGE\r\n\r\nOptions:\r\n  -c                          Compress IN, expect <magic> or error\r\n  -a --alg ALG                Algorithm to use for compression (one of ) [default: zstd]\r\n\r\n  -d                          Decompress IN, expect <magic> or error\r\n\r\n  -i IN                       Input file [default: -]\r\n  -o OUT                      Output file [default: -]\r\n\r\n  $OPT\r\n"
  },
  {
    "file": "nwn_erf.nim",
    "description": "Un/packs erf files.",
    "usage": "nwn_erf [options] -c <entry>...",
    "options": "-f ERF                      Operate on FILE instead of stdin/out [default: -]\r\n  -c                          Create archive from input files or directories\r\n  -x                          Unpack files into current directory\r\n  -t                          List files in archive\r\n  -v                          Echo file names as they are being worked on\r\n  -r NUM                      Recurse at most N directories when finding entries to pack [default: 1]\r\n  --no-symlinks               Don't follow symlinks\r\n  -e, --erf-type TYPE         Override erf header type. Will attempt auto-detection\r\n                              from outfile name, or \"ERF\" if stdout (in which case you\r\n                              need to specify it.)\r\n  --data-version VERSION      Data file version to write (one of V1, E1). [default: V1]\r\n  --data-compression ALG      Compression for E1 (one of ) [default: none]",
    "doc": "\r\nUn/packs erf files.\r\n\r\nUsage:\r\n  $0 [options] -c <entry>...\r\n  $0 [options] -x [<file>...]\r\n  $0 [options] -t\r\n  $USAGE\r\n\r\nOptions:\r\n  -f ERF                      Operate on FILE instead of stdin/out [default: -]\r\n\r\n  -c                          Create archive from input files or directories\r\n  -x                          Unpack files into current directory\r\n  -t                          List files in archive\r\n  -v                          Echo file names as they are being worked on\r\n\r\n  -r NUM                      Recurse at most N directories when finding entries to pack [default: 1]\r\n  --no-symlinks               Don't follow symlinks\r\n\r\n  -e, --erf-type TYPE         Override erf header type. Will attempt auto-detection\r\n                              from outfile name, or \"ERF\" if stdout (in which case you\r\n                              need to specify it.)\r\n\r\n  --data-version VERSION      Data file version to write (one of V1, E1). [default: V1]\r\n  --data-compression ALG      Compression for E1 (one of ) [default: none]\r\n\r\n  $OPT\r\n"
  },
  {
    "file": "nwn_erf_tlkify.nim",
    "description": "This utility reads a ERF (mod, hak), extracting all strings in\r\ncontained gff files and normalising them into a tlk.\r\n\r\nThe <tlk> file will be read at startup if it exists, and new entries\r\nwill be merged in.\r\n\r\nThe changed <erf> will be written to <out>; leaving the original\r\nfile untouched.",
    "usage": "nwn_erf_tlkify [options] <tlk> <erf> <out>",
    "options": "--languages N               Use language(s) N, discard all others [default: English]\r\n                              You can specify by enum const (\"English\"),\r\n                              shortcode (\"de\"), or by ID. (see languages.nim)\r\n                              You can specify multiple languages separated by comma.\r\n                              Only the first one will be used. The written TLK will\r\n                              be the first in the list. This functionality only exists\r\n                              to support adopting incorrectly-classified languages in\r\n                              your module.\r\n  --data-version VERSION      Data file version to write (one of V1, E1). [default: V1]\r\n  --data-compression ALG      Compression for E1 (one of",
    "doc": "This utility reads a ERF (mod, hak), extracting all strings in\r\ncontained gff files and normalising them into a tlk.\r\n\r\nThe <tlk> file will be read at startup if it exists, and new entries\r\nwill be merged in.\r\n\r\nThe changed <erf> will be written to <out>; leaving the original\r\nfile untouched.\r\n\r\nUsage:\r\n  $0 [options] <tlk> <erf> <out>\r\n  $USAGE\r\n\r\nOptions:\r\n  --languages N               Use language(s) N, discard all others [default: English]\r\n                              You can specify by enum const (\"English\"),\r\n                              shortcode (\"de\"), or by ID. (see languages.nim)\r\n                              You can specify multiple languages separated by comma.\r\n                              Only the first one will be used. The written TLK will\r\n                              be the first in the list. This functionality only exists\r\n                              to support adopting incorrectly-classified languages in\r\n                              your module.\r\n\r\n  --data-version VERSION      Data file version to write (one of V1, E1). [default: V1]\r\n  --data-compression ALG      Compression for E1 (one of"
  },
  {
    "file": "nwn_gff.nim",
    "description": "Convert gff data to json.\r\n\r\nThe json data is compatible with https://github.com/niv/nwn-lib.\r\n\r\nSupported input/output formats: \r\n\r\n\r\nInput and output default to stdin/stdout respectively.",
    "usage": "nwn_gff [options]",
    "options": "-i IN                       Input file [default: -]\r\n  -l INFORMAT                 Input format [default: autodetect]\r\n  --in-sqlite FILE            Squash the given SQLite database into the struct\r\n                              after reading IN. Only some GFF formats support\r\n                              embedded SQLite databases. This will clobber any\r\n                              SQLite data already present in IN.\r\n  -o OUT                      Output file [default: -]\r\n  -k OUTFORMAT                Output format [default: autodetect]\r\n  --out-sqlite FILE           Extract the SQLite contained in the operated-on\r\n                              file. Only some GFF formats support embedded SQLite\r\n                              databases.\r\n  -p, --pretty                Pretty output (json only)",
    "doc": "\r\nConvert gff data to json.\r\n\r\nThe json data is compatible with https://github.com/niv/nwn-lib.\r\n\r\nSupported input/output formats: \r\n\r\n\r\nInput and output default to stdin/stdout respectively.\r\n\r\nUsage:\r\n  $0 [options]\r\n  $USAGE\r\n\r\nOptions:\r\n  -i IN                       Input file [default: -]\r\n  -l INFORMAT                 Input format [default: autodetect]\r\n  --in-sqlite FILE            Squash the given SQLite database into the struct\r\n                              after reading IN. Only some GFF formats support\r\n                              embedded SQLite databases. This will clobber any\r\n                              SQLite data already present in IN.\r\n\r\n  -o OUT                      Output file [default: -]\r\n  -k OUTFORMAT                Output format [default: autodetect]\r\n  --out-sqlite FILE           Extract the SQLite contained in the operated-on\r\n                              file. Only some GFF formats support embedded SQLite\r\n                              databases.\r\n\r\n  -p, --pretty                Pretty output (json only)\r\n  $OPT\r\n"
  },
  {
    "file": "nwn_key_pack.nim",
    "description": "This utility packs a .key file and all associated bifs from directory tree.",
    "usage": "nwn_key_pack [options] <key> <source> <destination>",
    "options": "--data-version VERSION      Data file version to write (one of V1, E1). [default: V1]\r\n  --data-compression ALG      Compression for E1 (one of ) [default: none]\r\n  --no-squash                 Do not squash bif files into same directory as key.\r\n  --no-symlinks               Don't follow symlinks\r\n  -f --force                  Force pack even if target directory has stuff in it.",
    "doc": "\r\nThis utility packs a .key file and all associated bifs from directory tree.\r\n\r\nUsage:\r\n  $0 [options] <key> <source> <destination>\r\n  $USAGE\r\n\r\nOptions:\r\n  --data-version VERSION      Data file version to write (one of V1, E1). [default: V1]\r\n  --data-compression ALG      Compression for E1 (one of ) [default: none]\r\n\r\n  --no-squash                 Do not squash bif files into same directory as key.\r\n  --no-symlinks               Don't follow symlinks\r\n\r\n  -f --force                  Force pack even if target directory has stuff in it.\r\n  $OPT\r\n"
  },
  {
    "file": "nwn_key_shadows.nim",
    "description": "This utility walks a set of keyfiles and and prints out statistics on how much\r\ndata is shadowed.",
    "usage": "nwn_key_shadows [options] <key>...",
    "options": "",
    "doc": "This utility walks a set of keyfiles and and prints out statistics on how much\r\ndata is shadowed.\r\n\r\nUsage:\r\n  $0 [options] <key>...\r\n  $USAGE\r\n\r\n  $OPT"
  },
  {
    "file": "nwn_key_transparent.nim",
    "description": "This utility walks a set of keyfiles and and prints out statistics on how much\r\ndata is transparent (duplicates that do not add changes to resman).",
    "usage": "nwn_key_transparent [options] <key>...",
    "options": "",
    "doc": "This utility walks a set of keyfiles and and prints out statistics on how much\r\ndata is transparent (duplicates that do not add changes to resman).\r\n\r\nUsage:\r\n  $0 [options] <key>...\r\n  $USAGE\r\n\r\n  $OPT"
  },
  {
    "file": "nwn_key_unpack.nim",
    "description": "This tool unpacks a key file to the destination directory, exploded into subdirs.\r\nThis will only work on *one* keyfile; if you wish to expand a full set of key files,\r\nyou will have to do it for each one.",
    "usage": "nwn_key_unpack [options] <key> <destination>",
    "options": "-f --force                  Force unpack even if target directory has stuff in it.",
    "doc": "\r\nThis tool unpacks a key file to the destination directory, exploded into subdirs.\r\nThis will only work on *one* keyfile; if you wish to expand a full set of key files,\r\nyou will have to do it for each one.\r\n\r\nUsage:\r\n  $0 [options] <key> <destination>\r\n  $USAGE\r\n\r\nOptions:\r\n  -f --force                  Force unpack even if target directory has stuff in it.\r\n  $OPT\r\n"
  },
  {
    "file": "nwn_net.nim",
    "description": "Generic NWN1 game server query tool.\r\n\r\n<server> can be a hostname, a ip, or a host/ip:port tuple.  The BN*\r\npackets are meant to go to game servers; the BM* packets are for\r\nmasterserver communication, so target them at a masterserver!",
    "usage": "nwn_net [options] <server> bnes",
    "options": "-t, --timeout=TIMEOUT   Global timeout [default: 5000]\r\n  -a, --laddr=PORT        Local address to bind to [default: 0.0.0.0]",
    "doc": "\r\nGeneric NWN1 game server query tool.\r\n\r\n<server> can be a hostname, a ip, or a host/ip:port tuple.  The BN*\r\npackets are meant to go to game servers; the BM* packets are for\r\nmasterserver communication, so target them at a masterserver!\r\n\r\nUsage:\r\n  $0 [options] <server> bnes\r\n  $0 [options] <server> bnds\r\n  $0 [options] <server> bnxi\r\n  $0 [options] <server> bnlm\r\n  $0 [options] <server> bmst\r\n  $0 [options] <server> bmma\r\n  $0 [options] <server> bmra\r\n  $0 [options] <server> bsst\r\n  $USAGE\r\n\r\nOptions:\r\n  -t, --timeout=TIMEOUT   Global timeout [default: 5000]\r\n  -a, --laddr=PORT        Local address to bind to [default: 0.0.0.0]\r\n  $OPT\r\n"
  },
  {
    "file": "nwn_nwsync_fetch.nim",
    "description": "Build a download list for external downloaders to fully sync a manifest\r\ninto a repository. Can be used for mirroring.\r\n\r\nWill not skip already downloaded files (but aria2c will if you say -c).\r\n\r\nCurrently only supports aria2c. Example:\r\n  nwsync_fetch ./local/repo/path/ http://my-repo.url/ \\\r\n    4e1243bd22c66e76c2ba9eddc1f91394e57f9f83 | aria2c --input-file - -c",
    "usage": "nwn_nwsync_fetch [options] <root> <url> <sha1>",
    "options": "",
    "doc": "Build a download list for external downloaders to fully sync a manifest\r\ninto a repository. Can be used for mirroring.\r\n\r\nWill not skip already downloaded files (but aria2c will if you say -c).\r\n\r\nCurrently only supports aria2c. Example:\r\n  nwsync_fetch ./local/repo/path/ http://my-repo.url/ \\\r\n    4e1243bd22c66e76c2ba9eddc1f91394e57f9f83 | aria2c --input-file - -c\r\n\r\nUsage:\r\n  $0 [options] <root> <url> <sha1>\r\n  $USAGE\r\n\r\nOptions:\r\n  $OPT"
  },
  {
    "file": "nwn_nwsync_print.nim",
    "description": "This utility prints a manifest in human-readable form.",
    "usage": "nwn_nwsync_print [options] <manifest>",
    "options": "--verify                    Verify presence and checksum of files in manifest.",
    "doc": "This utility prints a manifest in human-readable form.\r\n\r\nUsage:\r\n  $0 [options] <manifest>\r\n  $USAGE\r\n\r\nOptions:\r\n  --verify                    Verify presence and checksum of files in manifest.\r\n  $OPT"
  },
  {
    "file": "nwn_nwsync_prune.nim",
    "description": "This utility will perform housekeeping on a nwsync repository.\r\n\r\nIt will:\r\n- Make sure `latest` is a valid pointer, if present.\r\n- Warns about manifests missing metadata.\r\n- Prune all data files not contained in any stored manifests.\r\n- Warn about missing data files.\r\n- Clean up the directory structure.",
    "usage": "nwn_nwsync_prune [options] <root>",
    "options": "-n --dry-run                Simulate, don't actually do anything.\r\n  --min-age AGE               Do not prune data files that have been written within\r\n                              AGE seconds. 2 weeks = [default: 1209600]",
    "doc": "This utility will perform housekeeping on a nwsync repository.\r\n\r\nIt will:\r\n- Make sure `latest` is a valid pointer, if present.\r\n- Warns about manifests missing metadata.\r\n- Prune all data files not contained in any stored manifests.\r\n- Warn about missing data files.\r\n- Clean up the directory structure.\r\n\r\nUsage:\r\n  $0 [options] <root>\r\n  $USAGE\r\n\r\nOptions:\r\n  -n --dry-run                Simulate, don't actually do anything.\r\n\r\n  --min-age AGE               Do not prune data files that have been written within\r\n                              AGE seconds. 2 weeks = [default: 1209600]\r\n  $OPT"
  },
  {
    "file": "nwn_nwsync_write.nim",
    "description": "This utility creates a new manifest in a serverside nwsync\r\nrepository.\r\n\r\n<root> is the storage directory into which the manifest will\r\nbe written. A <root> can hold multiple manifests.\r\n\r\nAll given <spec> are added to the manifest in order, with the\r\nlatest coming on top (for purposes of shadowing resources).\r\n\r\nEach <spec> will be unpacked, hashed, optionally compressed\r\nand written to the data subdirectory. This process can take a\r\nlong time, so be patient.\r\n\r\nAfter a manifest is written, the repository /latest file is\r\nupdated to point at it. This file is queried by game servers\r\nif the server admin does not specify a hash to serve explicitly.\r\n\r\n<spec> can be:\r\n\r\n* a .mod file, which will read the module and add all HAKs and\r\n  the optional TLK as the game would\r\n* any valid other erf container (HAK, ERF)\r\n* single files, including a TLK file\r\n* a directory containing single files",
    "usage": "nwn_nwsync_write [options] [--path PATH]... [--description=D] <root> <spec>...",
    "options": "--with-module               Include module contents. This is only useful when packing up\r\n                              a module for full distribution.\r\n                              DO NOT USE THIS FOR PERSISTENT WORLDS.\r\n  -p --path PATH...           Add a path to lookup when resolving module.ifo dependencies (haks, tlk).\r\n                              Can be given multiple times.\r\n  -n --dry-run                Don't actually touch repository, only simulate checksumming/writing.\r\nWhen running --with-module:\r\n  --mod-uuid=UUID             The module UUID to save. Required if the module does not\r\n                              have a UUID. Must be a UUIDv4.\r\n  --no-latest                 Don't update the latest pointer.\r\n  --name=N                    Override the visible name. Will extract the module name\r\n                              if a module is sourced.\r\n  --description=D             Override the visible description. Will extract module\r\n                              description if a module is sourced.\r\n  -f                          Force rewrite of existing data.\r\n  --compression=T             Compress repostory data. [default: zstd]\r\n                              This saves disk space and speeds up transfers if your\r\n                              webserver does not speak gzip or deflate compression.\r\n                              Supported compression types:",
    "doc": "This utility creates a new manifest in a serverside nwsync\r\nrepository.\r\n\r\n<root> is the storage directory into which the manifest will\r\nbe written. A <root> can hold multiple manifests.\r\n\r\nAll given <spec> are added to the manifest in order, with the\r\nlatest coming on top (for purposes of shadowing resources).\r\n\r\nEach <spec> will be unpacked, hashed, optionally compressed\r\nand written to the data subdirectory. This process can take a\r\nlong time, so be patient.\r\n\r\nAfter a manifest is written, the repository /latest file is\r\nupdated to point at it. This file is queried by game servers\r\nif the server admin does not specify a hash to serve explicitly.\r\n\r\n<spec> can be:\r\n\r\n* a .mod file, which will read the module and add all HAKs and\r\n  the optional TLK as the game would\r\n* any valid other erf container (HAK, ERF)\r\n* single files, including a TLK file\r\n* a directory containing single files\r\n\r\n\r\nUsage:\r\n  $0 [options] [--path PATH]... [--description=D] <root> <spec>...\r\n  $USAGE\r\n\r\nOptions:\r\n  --with-module               Include module contents. This is only useful when packing up\r\n                              a module for full distribution.\r\n                              DO NOT USE THIS FOR PERSISTENT WORLDS.\r\n\r\n  -p --path PATH...           Add a path to lookup when resolving module.ifo dependencies (haks, tlk).\r\n                              Can be given multiple times.\r\n\r\n  -n --dry-run                Don't actually touch repository, only simulate checksumming/writing.\r\n\r\nWhen running --with-module:\r\n  --mod-uuid=UUID             The module UUID to save. Required if the module does not\r\n                              have a UUID. Must be a UUIDv4.\r\n  --no-latest                 Don't update the latest pointer.\r\n\r\n  --name=N                    Override the visible name. Will extract the module name\r\n                              if a module is sourced.\r\n\r\n  --description=D             Override the visible description. Will extract module\r\n                              description if a module is sourced.\r\n\r\n  -f                          Force rewrite of existing data.\r\n  --compression=T             Compress repostory data. [default: zstd]\r\n                              This saves disk space and speeds up transfers if your\r\n                              webserver does not speak gzip or deflate compression.\r\n                              Supported compression types:"
  },
  {
    "file": "nwn_resman_cat.nim",
    "description": "Extract file(s) from resman to stdout.",
    "usage": "nwn_resman_cat [options] <file>...",
    "options": "",
    "doc": "\r\nExtract file(s) from resman to stdout.\r\n\r\nUsage:\r\n  $0 [options] <file>...\r\n  $USAGE\r\n\r\nOptions:\r\n  $OPTRESMAN\r\n"
  },
  {
    "file": "nwn_resman_diff.nim",
    "description": "This utility diffs two complete resman views.  We support two modes of operation:\r\n\r\n\r\nDiffing against another language in the same repository:\r\n\r\n  Just give the language path component to compare as the only argument (i.e. \"de\").\r\n  The lefthand-side language will be \"en\", unless overriden by --language.\r\n  Resman-modifying parameters like --keys and --erfs will apply to *both* sides.\r\n\r\n  Example:\r\n    $0 --keys nwn_base lang de  (This should show no differences)\r\n\r\n\r\nDiffing against another install (no other-language support yet):\r\n\r\n  The lefthand side will be set up by the builtin resman flags and options,\r\n  like --keys. The RHS only supports autdetect for now.\r\n  Hint: Give --verbose to see what exactly gets loaded into either.\r\n\r\n  Example:\r\n    $0 path ../00810\r\n\r\n\r\nThis utility will explicitly ignore .wav files that:\r\n\r\n- are binary mismatches\r\n- are in only one or the other side: This is *expected* as translations were\r\n  never completely complete\r\n\r\nGive --wav to override this.",
    "usage": "nwn_resman_diff [options] lang <lang2>",
    "options": "--write-mismatches          Write out mismatches to a directory. Warning:\r\n                              This will potentially be a LOT of data.\r\n  --wav                       Include wav files in diff considation.",
    "doc": "\r\nThis utility diffs two complete resman views.  We support two modes of operation:\r\n\r\n\r\nDiffing against another language in the same repository:\r\n\r\n  Just give the language path component to compare as the only argument (i.e. \"de\").\r\n  The lefthand-side language will be \"en\", unless overriden by --language.\r\n  Resman-modifying parameters like --keys and --erfs will apply to *both* sides.\r\n\r\n  Example:\r\n    $0 --keys nwn_base lang de  (This should show no differences)\r\n\r\n\r\nDiffing against another install (no other-language support yet):\r\n\r\n  The lefthand side will be set up by the builtin resman flags and options,\r\n  like --keys. The RHS only supports autdetect for now.\r\n  Hint: Give --verbose to see what exactly gets loaded into either.\r\n\r\n  Example:\r\n    $0 path ../00810\r\n\r\n\r\nThis utility will explicitly ignore .wav files that:\r\n\r\n- are binary mismatches\r\n- are in only one or the other side: This is *expected* as translations were\r\n  never completely complete\r\n\r\nGive --wav to override this.\r\n\r\nUsage:\r\n  $0 [options] lang <lang2>\r\n  $0 [options] path <path> [keyfiles]\r\n  $USAGE\r\n\r\nOptions:\r\n  --write-mismatches          Write out mismatches to a directory. Warning:\r\n                              This will potentially be a LOT of data.\r\n  --wav                       Include wav files in diff considation.\r\n  $OPTRESMAN\r\n"
  },
  {
    "file": "nwn_resman_extract.nim",
    "description": "Extract file(s) from resman into a directory.",
    "usage": "nwn_resman_extract [options] <file>...",
    "options": "--all                       Match all files.\r\n  -p, --pattern PATTERN       Match only files where the name contains PATTERN.\r\n                              Wildcards are not supported at this time.\r\n  -b, --binary BINARY         Match only files where the data contains BINARY.\r\n  -v, --invert-match          Invert matching rules.\r\n  -d DIRECTORY                Save files to DIRECTORY [default: .]",
    "doc": "\r\nExtract file(s) from resman into a directory.\r\n\r\nUsage:\r\n  $0 [options] <file>...\r\n  $0 [options]\r\n  $USAGE\r\n\r\nOptions:\r\n  --all                       Match all files.\r\n  -p, --pattern PATTERN       Match only files where the name contains PATTERN.\r\n                              Wildcards are not supported at this time.\r\n  -b, --binary BINARY         Match only files where the data contains BINARY.\r\n  -v, --invert-match          Invert matching rules.\r\n\r\n  -d DIRECTORY                Save files to DIRECTORY [default: .]\r\n  $OPTRESMAN\r\n"
  },
  {
    "file": "nwn_resman_grep.nim",
    "description": "Find files in resman\r\n\r\nNote: this is only the final resman view. This will NOT list resources\r\n      not indiced by keyfiles/override/etc and will not list shadowed\r\n      resource locations, only the latest.\r\n\r\nYou can optionally generate file checksums for each entry found. The selectable\r\nalgorithms are printed in the order listed in this help.",
    "usage": "nwn_resman_grep [options]",
    "options": "--all                       Match all files.\r\n  -p, --pattern PATTERN       Match only files where the name contains PATTERN.\r\n                              Wildcards are not supported at this time.\r\n  -b, --binary BINARY         Match only files where the data contains BINARY.\r\n  -v, --invert-match          Invert matching rules.\r\n  -d, --details               Show more details.\r\n  --md5                       Generate md5 checksums of files.\r\n  --sha1                      Generate sha1 checksums of files.",
    "doc": "\r\nFind files in resman\r\n\r\nNote: this is only the final resman view. This will NOT list resources\r\n      not indiced by keyfiles/override/etc and will not list shadowed\r\n      resource locations, only the latest.\r\n\r\nYou can optionally generate file checksums for each entry found. The selectable\r\nalgorithms are printed in the order listed in this help.\r\n\r\nUsage:\r\n  $0 [options]\r\n  $USAGE\r\n\r\nOptions:\r\n  --all                       Match all files.\r\n  -p, --pattern PATTERN       Match only files where the name contains PATTERN.\r\n                              Wildcards are not supported at this time.\r\n  -b, --binary BINARY         Match only files where the data contains BINARY.\r\n  -v, --invert-match          Invert matching rules.\r\n\r\n  -d, --details               Show more details.\r\n  --md5                       Generate md5 checksums of files.\r\n  --sha1                      Generate sha1 checksums of files.\r\n  $OPTRESMAN\r\n"
  },
  {
    "file": "nwn_resman_pkg.nim",
    "description": "Packages a resman view into a slimmed-down variant suitable for\r\nlimited-set deployments, like docker or script compilers.",
    "usage": "nwn_resman_pkg [options]",
    "options": "-d DIRECTORY                Save files to DIRECTORY [default: .]\r\n  -k KEYNAME                  Key filename [default: ]\r\n  -b BIFPREFIX                Bif prefix inside key table [default: data\\]\r\n  -B BIFDIR                   Put bifs into subdirectory [default: ]\r\n  --year YEAR                 Override embedded build year [default: ]\r\n  --doy DOY                   Override embedded day of year [default: ]\r\n  --extensions LIST           Comma-separated list of extensions to pack [default: ]\r\n  --stubext LIST              Comma-separated list of extensions to pack as zero-byte stub files [default: ]\r\n  --data-version VERSION      Data file version to write (one of V1, E1). [default: V1]\r\n  --data-compression ALG      Compression for E1 (one of ) [default: none]",
    "doc": "\r\nPackages a resman view into a slimmed-down variant suitable for\r\nlimited-set deployments, like docker or script compilers.\r\n\r\nUsage:\r\n  $0 [options]\r\n  $USAGE\r\n\r\nOptions:\r\n  -d DIRECTORY                Save files to DIRECTORY [default: .]\r\n  -k KEYNAME                  Key filename [default: ]\r\n  -b BIFPREFIX                Bif prefix inside key table [default: data\\]\r\n  -B BIFDIR                   Put bifs into subdirectory [default: ]\r\n  --year YEAR                 Override embedded build year [default: ]\r\n  --doy DOY                   Override embedded day of year [default: ]\r\n  --extensions LIST           Comma-separated list of extensions to pack [default: ]\r\n  --stubext LIST              Comma-separated list of extensions to pack as zero-byte stub files [default: ]\r\n\r\n  --data-version VERSION      Data file version to write (one of V1, E1). [default: V1]\r\n  --data-compression ALG      Compression for E1 (one of ) [default: none]\r\n  $OPTRESMAN\r\n"
  },
  {
    "file": "nwn_resman_stats.nim",
    "description": "This utility gives you a detailed view into what your resman stack looks like.\r\n\r\nIt prints:\r\n * The size/contents of each indiced container.\r\n * Total/accumulative stats.\r\n * How much shadowing is happening.\r\n\r\nShadowing lists files in a particular container that are hidden by files in\r\nlater containers (i.e. updates to files or duplicates).  Duplicates are not\r\nadvertised separately at this point.",
    "usage": "nwn_resman_stats [options]",
    "options": "-d                          More details.\r\n  -D                          Moaaaaaar details.\r\n  --shadows-to FILE           Write out a list of shadowed files to FILE.",
    "doc": "This utility gives you a detailed view into what your resman stack looks like.\r\n\r\nIt prints:\r\n * The size/contents of each indiced container.\r\n * Total/accumulative stats.\r\n * How much shadowing is happening.\r\n\r\nShadowing lists files in a particular container that are hidden by files in\r\nlater containers (i.e. updates to files or duplicates).  Duplicates are not\r\nadvertised separately at this point.\r\n\r\nUsage:\r\n  $0 [options]\r\n  $USAGE\r\n\r\nOptions:\r\n  -d                          More details.\r\n  -D                          Moaaaaaar details.\r\n  --shadows-to FILE           Write out a list of shadowed files to FILE.\r\n  $OPTRESMAN"
  },
  {
    "file": "nwn_script_comp.nim",
    "description": "Compile one or more scripts using the official compiler library.\r\n\r\n<file> must be a single fully-qualified source file.\r\n\r\n<spec> can be one or more files or directories. In the case of directories, recursion\r\ninto subdirectories will only happen if -R is given.\r\n\r\nTarget artifacts are written to the same directory each source file is in, unless\r\noverridden with -o or -d.",
    "usage": "nwn_script_comp [options] [-o <out>] <file>",
    "options": "",
    "doc": "Compile one or more scripts using the official compiler library.\r\n\r\n<file> must be a single fully-qualified source file.\r\n\r\n<spec> can be one or more files or directories. In the case of directories, recursion\r\ninto subdirectories will only happen if -R is given.\r\n\r\nTarget artifacts are written to the same directory each source file is in, unless\r\noverridden with -o or -d.\r\n\r\nUsage:\r\n  $0 [options] [-o <out>] <file>\r\n  $0 [options] [-d <out>] [-R] -c <spec>...\r\n  $USAGE\r\n\r\n  -o OUT                      When compiling single file, specify outfile.\r\n\r\n  -c                          Compile multiple files and/or directories.\r\n  -d DIR                      When compiling multiple files, write all build artifacts into DIR.\r\n  -R                          Recurse into subdirectories for each given directory.\r\n  --follow-symlinks           Follow symlinks when compiling recursively.\r\n\r\n  -g                          Write debug symbol files (NDB).\r\n  -y                          Continue processing input files even on error.\r\n  -j N                        Parallel execution (default: all CPUs).\r\n\r\n  -O N                        Optimisation levels [default: 2]\r\n                                0: Optimise nothing\r\n                                2: Aggressive optimisations; fastest and smallest code size:"
  },
  {
    "file": "nwn_ssf.nim",
    "description": "Convert SSF tables to/from various formats.\r\n\r\nSupported input/output formats: \r\n\r\nNotes:\r\n  * Input and output default to stdin/stdout respectively (\"-\").\r\n  * You cannot pipe the input file into itself (this will result in a\r\n    zero-length file).",
    "usage": "nwn_ssf [options]",
    "options": "-i IN                       Input file [default: -]\r\n  -l INFORMAT                 Input format [default: autodetect]\r\n  -o OUT                      Output file [default: -]\r\n  -k OUTFORMAT                Output format [default: autodetect]\r\n  --csv-separator SEP         What to use as separator for CSV cells [default: ,]",
    "doc": "\r\nConvert SSF tables to/from various formats.\r\n\r\nSupported input/output formats: \r\n\r\nNotes:\r\n  * Input and output default to stdin/stdout respectively (\"-\").\r\n  * You cannot pipe the input file into itself (this will result in a\r\n    zero-length file).\r\n\r\nUsage:\r\n  $0 [options]\r\n  $USAGE\r\n\r\nOptions:\r\n  -i IN                       Input file [default: -]\r\n  -l INFORMAT                 Input format [default: autodetect]\r\n\r\n  -o OUT                      Output file [default: -]\r\n  -k OUTFORMAT                Output format [default: autodetect]\r\n\r\n  --csv-separator SEP         What to use as separator for CSV cells [default: ,]\r\n  $OPT\r\n"
  },
  {
    "file": "nwn_tlk.nim",
    "description": "Convert talk table to/from various formats.\r\n\r\nSupported input/output formats: \r\n\r\n\r\nThe \"debug\" format dumps a tree-like view of the actual file structure.\r\nThis is useful to diff two files in a more human-readable way than resorting\r\nto binary diffing.\r\n\r\nThe \"review\" format includes a single line for each tlk entry, containing:\r\n  <strref> <lengthOfSoundResRef> <lengthOfText>\r\nOnly entries with data are dumped; empty entries (no sound, no text) are\r\nignored regardless of the FLAGS field set in the tlk.\r\n\r\nNotes:\r\n  * .json is *always* read and written as UTF-8, as the spec requires.\r\n  * .review is output-only.\r\n  * .debug is output-only.\r\n  * Input and output default to stdin/stdout respectively (\"-\").\r\n  * You cannot pipe the input file into itself (this will result in a\r\n    zero-length file).",
    "usage": "nwn_tlk [options]",
    "options": "-i IN                       Input file [default: -]\r\n  -l INFORMAT                 Input format [default: autodetect]\r\n  -o OUT                      Output file [default: -]\r\n  -k OUTFORMAT                Output format [default: autodetect]\r\n  -p, --pretty                Pretty output (json only)\r\n  --language LANG             Override language ID when writing files.\r\n                              You can specify by enum const (\"English\"),\r\n                              shortcode (\"de\"), or by ID. (see languages.nim)\r\n  --csv-separator SEP         What to use as separator for CSV cells [default: ,]\r\n  --review-with-text          Only emit entries containing a text (and optionally sound).\r\n  --review-only-text          Only emit entries containing a text, not sound or both,\r\n                              regardless of FLAGS in the tlk.\r\n  --review-only-sound         Only emit entries containing a sound, not text or both,\r\n                              regardless of FLAGS in the tlk.",
    "doc": "\r\nConvert talk table to/from various formats.\r\n\r\nSupported input/output formats: \r\n\r\n\r\nThe \"debug\" format dumps a tree-like view of the actual file structure.\r\nThis is useful to diff two files in a more human-readable way than resorting\r\nto binary diffing.\r\n\r\nThe \"review\" format includes a single line for each tlk entry, containing:\r\n  <strref> <lengthOfSoundResRef> <lengthOfText>\r\nOnly entries with data are dumped; empty entries (no sound, no text) are\r\nignored regardless of the FLAGS field set in the tlk.\r\n\r\nNotes:\r\n  * .json is *always* read and written as UTF-8, as the spec requires.\r\n  * .review is output-only.\r\n  * .debug is output-only.\r\n  * Input and output default to stdin/stdout respectively (\"-\").\r\n  * You cannot pipe the input file into itself (this will result in a\r\n    zero-length file).\r\n\r\nUsage:\r\n  $0 [options]\r\n  $USAGE\r\n\r\nOptions:\r\n  -i IN                       Input file [default: -]\r\n  -l INFORMAT                 Input format [default: autodetect]\r\n\r\n  -o OUT                      Output file [default: -]\r\n  -k OUTFORMAT                Output format [default: autodetect]\r\n\r\n  -p, --pretty                Pretty output (json only)\r\n\r\n  --language LANG             Override language ID when writing files.\r\n                              You can specify by enum const (\"English\"),\r\n                              shortcode (\"de\"), or by ID. (see languages.nim)\r\n\r\n  --csv-separator SEP         What to use as separator for CSV cells [default: ,]\r\n\r\n  --review-with-text          Only emit entries containing a text (and optionally sound).\r\n  --review-only-text          Only emit entries containing a text, not sound or both,\r\n                              regardless of FLAGS in the tlk.\r\n  --review-only-sound         Only emit entries containing a sound, not text or both,\r\n                              regardless of FLAGS in the tlk.\r\n  $OPT\r\n"
  },
  {
    "file": "nwn_twoda.nim",
    "description": "Converts twoda tables from/to various formats.\r\n\r\nInput and output default to stdin/stdout respectively.\r\n\r\nTwoDA format:\r\n  2da output will always be formatted nicely.\r\n\r\n  The parser is lenient: It will accept malformed input in exactly the same way\r\n  that nwserver works; so any file shunted through this utility will be formatted\r\n  nicely afterwards, but may lose data if the formatting was broken in the first\r\n  place.",
    "usage": "nwn_twoda [options]",
    "options": "-i IN                       Input file [default: -]\r\n  -l INFORMAT                 Input format [default: autodetect]\r\n  -o OUT                      Output file [default: -]\r\n  -k OUTFORMAT                Output format [default: autodetect]\r\n  --minify                    Minifies 2da output using minimal padding instead of using pretty formatting.\r\n  --csv-separator SEP         What to use as separator for CSV cells [default: ,]\r\n  --write-id-column           Generate ID column when exporting non-2da formats.\r\n                              Not all formats might be supported. Note that the ID column\r\n                              is ignored by the game and the generated column is only\r\n                              for your convenience.\r\n                              Thus, when reading files generated with this option, the ID column\r\n                              is also discarded. IDs are assigned based on order of appearance.",
    "doc": "\r\nConverts twoda tables from/to various formats.\r\n\r\nInput and output default to stdin/stdout respectively.\r\n\r\nTwoDA format:\r\n  2da output will always be formatted nicely.\r\n\r\n  The parser is lenient: It will accept malformed input in exactly the same way\r\n  that nwserver works; so any file shunted through this utility will be formatted\r\n  nicely afterwards, but may lose data if the formatting was broken in the first\r\n  place.\r\n\r\nUsage:\r\n  $0 [options]\r\n  $USAGE\r\n\r\nOptions:\r\n  -i IN                       Input file [default: -]\r\n  -l INFORMAT                 Input format [default: autodetect]\r\n\r\n  -o OUT                      Output file [default: -]\r\n  -k OUTFORMAT                Output format [default: autodetect]\r\n\r\n  --minify                    Minifies 2da output using minimal padding instead of using pretty formatting.\r\n\r\n  --csv-separator SEP         What to use as separator for CSV cells [default: ,]\r\n\r\n  --write-id-column           Generate ID column when exporting non-2da formats.\r\n                              Not all formats might be supported. Note that the ID column\r\n                              is ignored by the game and the generated column is only\r\n                              for your convenience.\r\n                              Thus, when reading files generated with this option, the ID column\r\n                              is also discarded. IDs are assigned based on order of appearance.\r\n\r\n  $OPT\r\n"
  }
]